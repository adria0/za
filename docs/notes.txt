-- jaz.jison operator precendence, C-based -----------------------------

leftHandExpression,DECNUMBER,HEXNUMBER,'(' expression ')'
leftHandExpression'++',leftHandExpression'--',functionCall
'++'leftHandExpression', '--'leftHandExpression,'+','-','!','~'
**
* / \\ %
+ -
<< >> 
<= >= < >
== !=
&
^    
| 
&&
|| 
rightArray
= += -= *= /= %= <<= >>= &= |= ^= <== ==> <-- --> === :?

-- rust inspired grammar -----------------------------------------------

DECNUMBER, HEXNUMBER, "(" exp ")"
Unary - !
**      
* / \\ %
+ - 	
<< >> 
& 
^ 
| 
== != < > <= >=
&&
||

differences from jaz.jison are:
  - does not put comparation ops between bit operators 
    bit operators have always more priority
  - removed pre/post inc/dec unary operators
  - removed :?
  - loops/conditionals must have { } (alla golang)
  - dbg! function
  - do not allow lazy-evaluation in loops
  - signal input/outputs arrays should be evaluable with template parameters
  - Proposals
    - no default values like "var x;"
    - explicit mutability: "const" or "mut";
    - remove "var" => "usize", "fs", "qeq" and "bool"
    - tagged signals
    - embeeded loops signal1[0..n] <== signal2[0..n]


